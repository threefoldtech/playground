import{d as T,u as K,r as o,a as H,b as m,o as L,c as Y,w as i,g as N,e as _,f as t,m as b,h as Q,i as R,j as z,t as W,k as J,n as O,_ as X,l as Z,F as x}from"./index-df6f743d.js";import{_ as B,P as F,d as ee,a as le}from"./tf_deployment_list.vue_vue_type_script_setup_true_lang-1803a4f6.js";import{_ as I}from"./select_vm_image.vue_vue_type_script_setup_true_lang-b568049a.js";import{_ as q}from"./expandable_layout.vue_vue_type_script_setup_true_lang-235dc857.js";import"./list_table.vue_vue_type_script_setup_true_lang-046c7938.js";const ae=z("a",{class:"app-link",href:"https://manual.grid.tf/weblets/weblets_fullVm.html",target:"_blank"}," Quick start documentation ",-1),te={class:"text-h6 mb-4"},se={name:"FullVm",components:{SelectVmImage:I,SelectFarm:B,ExpandableLayout:q}},ie=T({...se,setup(C){const n=K(),w=o(),h=H(),S=[{name:"Ubuntu-22.04",flist:"https://hub.grid.tf/tf-official-vms/ubuntu-22.04.flist",entryPoint:"/init.sh"},{name:"Ubuntu-20.04",flist:"https://hub.grid.tf/tf-official-vms/ubuntu-20.04-lts.flist",entryPoint:"/init.sh"},{name:"Ubuntu-18.04",flist:"https://hub.grid.tf/tf-official-vms/ubuntu-18.04-lts.flist",entryPoint:"/init.sh"},{name:"Nixos-22.11",flist:"https://hub.grid.tf/tf-official-vms/nixos-22.11.flist",entryPoint:"/init.sh"}],v=o("VM"+N(8)),p=o(),d=o(4),y=o(8192),V=o(50),g=o(!1),D=o(!1),P=o(!0),U=o(!1),f=o(),u=o([]);function G(){const l=N(7);u.value.push({name:"DISK"+l,size:50,mountPoint:"/mnt/"+l})}async function $(){n.value.setStatus("deploy");const l=F.Fullvm.toLowerCase();try{const a=await J(h.profile,l);await n.value.validateBalance(a);const r=await ee(a,{name:v.value,machines:[{name:v.value,cpu:d.value,memory:y.value,flist:p.value.value,entryPoint:p.value.entryPoint,farmId:f.value.farmID,farmName:f.value.name,country:f.value.country,disks:[{size:V.value,mountPoint:"/"},...u.value],publicIpv4:g.value,publicIpv6:D.value,planetary:P.value,envs:[{key:"SSH_KEY",value:h.profile.ssh}],rootFilesystemSize:2}],network:{addAccess:U.value}});n.value.reloadDeploymentsList(),n.value.setStatus("success","Successfully deployed a full virtual machine instance."),n.value.openDialog(r,{SSH_KEY:"Public SSH Key"})}catch(a){n.value.setStatus("failed",O(a,"Failed to deploy a full virtual machine instance."))}}return(l,a)=>{const r=m("v-text-field"),c=m("input-validator"),k=m("v-switch"),A=m("d-tabs"),j=m("v-btn"),E=m("weblet-layout");return L(),Y(E,{ref_key:"layout",ref:n},{title:i(()=>[_("Deploy a Full Virtual Machine")]),subtitle:i(()=>[_("Deploy a new full virtual machine on the Threefold Grid "),ae,_(" . ")]),"footer-actions":i(()=>{var e;return[t(j,{color:"primary",variant:"tonal",onClick:$,disabled:(e=w.value)==null?void 0:e.invalid},{default:i(()=>[_(" Deploy ")]),_:1},8,["disabled"])]}),default:i(()=>[t(A,{tabs:[{title:"Config",value:"config"},{title:"Disks",value:"disks"}],ref_key:"tabs",ref:w},{config:i(()=>[t(c,{value:v.value,rules:[l.validators.required("Name is required."),l.validators.isAlphanumeric("Name should consist of letters only."),e=>l.validators.isAlpha("Name must start with alphabet char.")(e[0]),l.validators.minLength("Name minLength is 2 chars.",2),l.validators.maxLength("Name maxLength is 15 chars.",15)]},{default:i(({props:e})=>[t(r,b({label:"Name",modelValue:v.value,"onUpdate:modelValue":a[0]||(a[0]=s=>v.value=s)},e),null,16,["modelValue"])]),_:1},8,["value","rules"]),t(I,{images:S,modelValue:p.value,"onUpdate:modelValue":a[1]||(a[1]=e=>p.value=e)},null,8,["modelValue"]),t(c,{value:d.value,rules:[l.validators.required("CPU is required."),l.validators.isInt("CPU must be a valid integer."),l.validators.min("CPU min is 1 cores.",1),l.validators.max("CPU max is 32 cores.",32)]},{default:i(({props:e})=>[t(r,b({label:"CPU (vCores)",type:"number",modelValue:d.value,"onUpdate:modelValue":a[2]||(a[2]=s=>d.value=s),modelModifiers:{number:!0}},e),null,16,["modelValue"])]),_:1},8,["value","rules"]),t(c,{value:y.value,rules:[l.validators.required("Memory is required."),l.validators.isInt("Memory must be a valid integer."),l.validators.min("Minimum allowed memory is 256 MB.",256),l.validators.max("Maximum allowed memory is 256 GB.",256*1024)]},{default:i(({props:e})=>[t(r,b({label:"Memory (MB)",type:"number",modelValue:y.value,"onUpdate:modelValue":a[3]||(a[3]=s=>y.value=s),modelModifiers:{number:!0}},e),null,16,["modelValue"])]),_:1},8,["value","rules"]),t(c,{value:V.value,rules:[l.validators.required("Disk size is required."),l.validators.isInt("Disk size must be a valid integer."),l.validators.min("Minimum allowed disk size is 15 GB.",15),l.validators.max("Maximum allowed disk size is 10000 GB.",1e4)]},{default:i(({props:e})=>[t(r,b({label:"Disk Size (GB)",type:"number",modelValue:V.value,"onUpdate:modelValue":a[4]||(a[4]=s=>V.value=s),modelModifiers:{number:!0}},e),null,16,["modelValue"])]),_:1},8,["value","rules"]),t(k,{color:"primary",inset:"",label:"Public IPv4",modelValue:g.value,"onUpdate:modelValue":a[5]||(a[5]=e=>g.value=e)},null,8,["modelValue"]),t(k,{color:"primary",inset:"",label:"Public IPv6",modelValue:D.value,"onUpdate:modelValue":a[6]||(a[6]=e=>D.value=e)},null,8,["modelValue"]),t(k,{color:"primary",inset:"",label:"Planetary Network",modelValue:P.value,"onUpdate:modelValue":a[7]||(a[7]=e=>P.value=e)},null,8,["modelValue"]),t(k,{color:"primary",inset:"",label:"Add Wireguard Access",modelValue:U.value,"onUpdate:modelValue":a[8]||(a[8]=e=>U.value=e)},null,8,["modelValue"]),t(B,{filters:{cpu:d.value,memory:y.value,publicIp:g.value,ssd:u.value.reduce((e,s)=>e+s.size,V.value)},modelValue:Q(f),"onUpdate:modelValue":a[9]||(a[9]=e=>R(f)?f.value=e:null)},null,8,["filters","modelValue"])]),disks:i(()=>[t(q,{modelValue:u.value,"onUpdate:modelValue":a[10]||(a[10]=e=>u.value=e),onAdd:G},{default:i(({index:e})=>[z("p",te,"Disk #"+W(e+1),1),t(c,{value:u.value[e].name,rules:[l.validators.required("Disk name is required."),s=>l.validators.isAlpha("Name must start with alphabet char.")(s[0]),l.validators.minLength("Disk minLength is 2 chars.",2),l.validators.isAlphanumeric("Disk name only accepts alphanumeric chars."),l.validators.maxLength("Disk maxLength is 15 chars.",15)]},{default:i(({props:s})=>[t(r,b({label:"Name",modelValue:u.value[e].name,"onUpdate:modelValue":M=>u.value[e].name=M},s),null,16,["modelValue","onUpdate:modelValue"])]),_:2},1032,["value","rules"]),t(c,{value:u.value[e].size,rules:[l.validators.required("Disk size is required."),l.validators.isInt("Disk size must be a valid integer."),l.validators.min("Minimum allowed disk size is 1 GB.",1),l.validators.max("Maximum allowed disk size is 10000 GB.",1e4)]},{default:i(({props:s})=>[t(r,b({label:"Size (GB)",type:"number",modelValue:u.value[e].size,"onUpdate:modelValue":M=>u.value[e].size=M,modelModifiers:{number:!0}},s),null,16,["modelValue","onUpdate:modelValue"])]),_:2},1032,["value","rules"])]),_:1},8,["modelValue"])]),_:1},512)]),_:1},512)}}}),oe={name:"FullVirtualMachine",components:{FullVm:ie,TfDeploymentList:le},setup(){return{name:F.Fullvm}}},ue={class:"mt-4"};function ne(C,n,w,h,S,v){const p=m("FullVm"),d=m("TfDeploymentList");return L(),Z(x,null,[t(p),z("div",ue,[t(d,{"project-name":h.name},null,8,["project-name"])])],64)}const fe=X(oe,[["render",ne]]);export{fe as default};
