import{d as h,r as n,B as I,b as f,o as D,A as E,f as o,G as Z,F as O,w as s,j as x,h as A,k as R,D as j,l as $,n as z,u as ee,a as te,N as ae,c as le,g as oe,e as P,m as ne,i as ue,p as V,q as B,O as re,s as q,t as se,K as ie,y as me,z as de,_ as pe}from"./index-db529f9f.js";import{_ as K,P as Y,d as ce}from"./root_fs-a2832d70.js";import{_ as ve}from"./tf_deployment_list.vue_vue_type_script_setup_true_lang-584738f9.js";import"./list_table.vue_vue_type_script_setup_true_lang-4e0f8b23.js";const fe={name:"AlgorandCapacity"},H=h({...fe,props:{network:null,type:null},emits:["update:cpu","update:memory","update:storage"],setup(F,{emit:d}){const m=F,N=n(),L=n(),_=n(),y=n(!1),i=n(2),p=n(4096),c=n(100);I(i,a=>d("update:cpu",a),{immediate:!0}),I(p,a=>d("update:memory",a),{immediate:!0}),I(c,a=>d("update:storage",a),{immediate:!0}),I(()=>[y.value,m.network,m.type],([a,t,u])=>{var M,S,v,r,e,b;if(a)(S=N.value)==null||S.validate((M=i.value)==null?void 0:M.toString()),(r=L.value)==null||r.validate((v=p.value)==null?void 0:v.toString()),(b=_.value)==null||b.validate((e=c.value)==null?void 0:e.toString());else{const w=U(t,u);i.value=w.cpu,p.value=w.memory,c.value=w.storage}});function T(a){const t=U(m.network,m.type),u=$(`CPU min is ${t.cpu} cores.`,t.cpu)(a);return u||z("CPU max is 32 cores.",32)(a)}function g(a){const t=U(m.network,m.type),u=$(`Minimum allowed memory is ${t.memory} GB.`,t.memory)(a);return u||z("Maximum allowed memory is 256 GB.",256*1024)(a)}function k(a){const t=U(m.network,m.type),u=$(`Minimum allowed storage size is ${t.storage} GB.`,t.storage)(a);return u||z(`Maximum allowed storage size is ${t.storage+200} GB.`,t.storage+200)(a)}function U(a,t){return t=="relay"&&a=="mainnet"?{cpu:4,memory:1024*8,storage:950}:t=="indexer"&&a=="testnet"?{cpu:4,memory:1024*8,storage:1300}:t=="indexer"&&a=="mainnet"?{cpu:4,memory:1024*8,storage:1500}:{cpu:2,memory:4*1024,storage:100}}return(a,t)=>{const u=f("v-switch"),M=f("v-text-field"),S=f("input-validator");return D(),E(O,null,[o(u,{color:"primary",inset:"",label:"Set Custom Capacity",modelValue:y.value,"onUpdate:modelValue":t[0]||(t[0]=v=>y.value=v)},null,8,["modelValue"]),Z(a.$slots,"default"),y.value?(D(),E(O,{key:0},[o(S,{value:i.value,rules:[A("CPU is required."),R("CPU must be a valid integer."),T],ref_key:"cpuInput",ref:N},{default:s(({props:v})=>[o(M,x({label:"CPU (vCores)",type:"number",modelValue:i.value,"onUpdate:modelValue":t[1]||(t[1]=r=>i.value=r),modelModifiers:{number:!0}},v),null,16,["modelValue"])]),_:1},8,["value","rules"]),o(S,{value:p.value,rules:[A("Memory is required."),R("Memory must be a valid integer."),g],ref_key:"memoryInput",ref:L},{default:s(({props:v})=>[o(M,x({label:"Memory (MB)",type:"number",modelValue:p.value,"onUpdate:modelValue":t[2]||(t[2]=r=>p.value=r),modelModifiers:{number:!0}},v),null,16,["modelValue"])]),_:1},8,["value","rules"]),o(S,{value:c.value,rules:[A("Storage size is required."),R("Storage size must be a valid integer."),k],ref_key:"storageInput",ref:_},{default:s(({props:v})=>[o(M,x({label:"Storage Size (GB)",type:"number",modelValue:c.value,"onUpdate:modelValue":t[3]||(t[3]=r=>c.value=r),modelModifiers:{number:!0}},v),null,16,["modelValue"])]),_:1},8,["value","rules"])],64)):j("",!0)],64)}}}),ye=q("a",{target:"_blank",href:"https://manual.grid.tf/weblets/weblets_algorand.html",class:"app-link"}," Quick start documentation ",-1),ge={name:"TfAlgorand",components:{SelectFarm:K,AlgorandCapacity:H}},_e=h({...ge,setup(F){const d=ee(),m=n(!1),N=n(),L=te(),_=n("al"+oe(9)),y=n(!1),i=n(),p=n(),c=n(),T=n("mainnet"),g=n("default"),k=n(""),U=ae(()=>k.value?k.value.split(" ").length:0),a=n(24e6),t=n(26e6),u=n();I(a,()=>N.value.validate(t.value.toString()));async function M(){d.value.setStatus("deploy");const r=Y.Algorand.toLowerCase();try{const e=await me(L.profile,r);await d.value.validateBalance(e);const b=await ce(e,{name:_.value,machines:[{name:_.value,cpu:i.value,memory:p.value,farmId:u.value.farmID,farmName:u.value.name,country:u.value.country,flist:"https://hub.grid.tf/tf-official-apps/algorand-latest.flist",entryPoint:"/sbin/zinit init",rootFilesystemSize:c.value,publicIpv4:y.value,planetary:!0,disks:g.value==="indexer"?[{size:50,mountPoint:"/var/lib/docker"}]:[],envs:[{key:"SSH_KEY",value:L.profile.ssh},{key:"NETWORK",value:T.value},{key:"NODE_TYPE",value:g.value},...g.value==="participant"?[{key:"ACCOUNT_MNEMONICS",value:k.value},{key:"FIRST_ROUND",value:a.value.toString()},{key:"LAST_ROUND",value:t.value.toString()}]:[]]}]});d.value.reloadDeploymentsList(),d.value.setStatus("success","Successfully deployed an alogrand node."),d.value.openDialog(b,{SSH_KEY:"Public SSH Key",NETWORK:"Network",NODE_TYPE:"Node Type",ACCOUNT_MNEMONICS:"Account Mnemonic",FIRST_ROUND:"First Round",LAST_ROUND:"Last Round"})}catch(e){d.value.setStatus("failed",de(e,"Failed to deploy an alogrand node."))}}function S(r){if(r.split(" ").length!==25)return{message:"Mnemonic must have 25 words separated by spaces."}}function v(r){const e=a.value;return $(`Last round must be greater than ${e}`,e+1)(r)}return(r,e)=>{const b=f("v-text-field"),w=f("input-validator"),W=f("v-switch"),G=f("v-select"),Q=f("form-validator"),J=f("v-btn"),X=f("weblet-layout");return D(),le(X,{ref_key:"layout",ref:d},{title:s(()=>[P("Deploy a Algorand Instance ")]),subtitle:s(()=>[P(" Algorand (ALGO) is a blockchain platform and cryptocurrency designed to function like a major payments processor. "),ye]),"footer-actions":s(()=>[o(J,{color:"primary",variant:"tonal",onClick:M,disabled:!m.value},{default:s(()=>[P(" Deploy ")]),_:1},8,["disabled"])]),default:s(()=>[o(Q,{modelValue:m.value,"onUpdate:modelValue":e[11]||(e[11]=l=>m.value=l)},{default:s(()=>[o(w,{value:_.value,rules:[A("Name is required."),ne("Name minLength is 2 chars.",2),ue("Name maxLength is 15 chars.",15)]},{default:s(({props:l})=>[o(b,x({label:"Name",modelValue:_.value,"onUpdate:modelValue":e[0]||(e[0]=C=>_.value=C)},l),null,16,["modelValue"])]),_:1},8,["value","rules"]),o(W,{color:"primary",inset:"",label:"Public IPv4",modelValue:y.value,"onUpdate:modelValue":e[1]||(e[1]=l=>y.value=l)},null,8,["modelValue"]),o(H,{network:T.value,type:g.value,cpu:V(i),"onUpdate:cpu":e[7]||(e[7]=l=>B(i)?i.value=l:null),cpuModifiers:{number:!0},memory:V(p),"onUpdate:memory":e[8]||(e[8]=l=>B(p)?p.value=l:null),memoryModifiers:{number:!0},storage:V(c),"onUpdate:storage":e[9]||(e[9]=l=>B(c)?c.value=l:null),storageModifiers:{number:!0}},{default:s(()=>[o(G,{label:"Network",items:[{title:"Mainnet",value:"mainnet"},{title:"Testnet",value:"testnet"},{title:"Betanet",value:"betanet"},{title:"Devnet",value:"devnet"}],modelValue:T.value,"onUpdate:modelValue":e[2]||(e[2]=l=>T.value=l)},null,8,["modelValue"]),o(G,{label:"Node Type",items:[{title:"Default",value:"default"},{title:"Participant",value:"participant"},{title:"Relay",value:"relay"},{title:"Indexer",value:"indexer"}],modelValue:g.value,"onUpdate:modelValue":e[3]||(e[3]=l=>g.value=l)},null,8,["modelValue"]),g.value==="participant"?(D(),E(O,{key:0},[o(w,{value:k.value,rules:[A("Mnemonic is required."),l=>re("Mnemonic can contain only alphabetic characters.")(l.replace(/\s/g,"")),S]},{default:s(({props:l})=>[o(b,x({label:"Account Mnemonic",placeholder:"Algorand Account Mnemonic",modelValue:k.value,"onUpdate:modelValue":e[4]||(e[4]=C=>k.value=C),modelModifiers:{trim:!0}},l,{autofocus:"",counter:""}),{counter:s(()=>[q("span",{class:ie({"text-red":V(U)>25})},se(V(U)),3),P(" / 25 ")]),_:2},1040,["modelValue"])]),_:1},8,["value","rules"]),o(w,{value:a.value,rules:[A("First round is required."),R("First round must be a valid integer."),$("First round must be greater than 0.",1)]},{default:s(({props:l})=>[o(b,x({label:"First Round",placeholder:"First Validation Block",modelValue:a.value,"onUpdate:modelValue":e[5]||(e[5]=C=>a.value=C),modelModifiers:{number:!0}},l,{type:"number"}),null,16,["modelValue"])]),_:1},8,["value","rules"]),o(w,{value:t.value,rules:[A("Last round is required."),R("Last round must be a valid integer."),v],ref_key:"lastRoundInput",ref:N},{default:s(({props:l})=>[o(b,x({label:"Last Round",placeholder:"Last Validation Block",modelValue:t.value,"onUpdate:modelValue":e[6]||(e[6]=C=>t.value=C),modelModifiers:{number:!0}},l,{type:"number"}),null,16,["modelValue"])]),_:1},8,["value","rules"])],64)):j("",!0)]),_:1},8,["network","type","cpu","memory","storage"]),o(K,{filters:{cpu:V(i),memory:V(p),ssd:V(c)+(g.value==="indexer"?50:0),publicIp:y.value},modelValue:V(u),"onUpdate:modelValue":e[10]||(e[10]=l=>B(u)?u.value=l:null)},null,8,["filters","modelValue"])]),_:1},8,["modelValue"])]),_:1},512)}}}),be={name:"AlgorandView",components:{TfAlgorand:_e,TfDeploymentList:ve},setup(){return{name:Y.Algorand}}},Ve={class:"mt-4"};function ke(F,d,m,N,L,_){const y=f("TfAlgorand"),i=f("TfDeploymentList");return D(),E(O,null,[o(y),q("div",Ve,[o(i,{"project-name":N.name},null,8,["project-name"])])],64)}const Ue=pe(be,[["render",ke]]);export{Ue as default};
