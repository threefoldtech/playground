import{d as ae,u as le,r as n,a as te,b as i,o as G,c as oe,w as t,g as K,e as S,f as l,h as c,m as F,i as N,j as f,p as C,q as E,k as L,l as x,n as $,v as A,s as I,t as ue,x as ne,y as se,z as ie,_ as re,A as me,F as de}from"./index-b7afd9dd.js";import{_ as j,P as T,d as pe}from"./root_fs-caa8e3a5.js";import{_ as H}from"./select_vm_image.vue_vue_type_script_setup_true_lang-e385ae05.js";import{a as Z,_ as ve}from"./tf_deployment_list.vue_vue_type_script_setup_true_lang-1240b60d.js";import{_ as B}from"./expandable_layout.vue_vue_type_script_setup_true_lang-052cc532.js";import"./list_table.vue_vue_type_script_setup_true_lang-dd240133.js";const ce=I("a",{class:"app-link",href:"https://library.threefold.me/info/manual/#/manual__weblets_vm",target:"_blank"}," Quick start documentation ",-1),fe={class:"text-h6 mb-4"},ye={name:"MicroVm",components:{SelectVmImage:H,RootFsSize:Z,SelectFarm:j,ExpandableLayout:B}},Ve=ae({...ye,setup(R){const r=le(),w=n(),k=te(),q=[{name:"Ubuntu-22.04",flist:"https://hub.grid.tf/tf-official-apps/threefoldtech-ubuntu-22.04.flist",entryPoint:"/sbin/zinit init"},{name:"Alpine-3",flist:"https://hub.grid.tf/tf-official-apps/threefoldtech-alpine-3.flist",entryPoint:"/entrypoint.sh"},{name:"CentOS-8",flist:"https://hub.grid.tf/tf-official-apps/threefoldtech-centos-8.flist",entryPoint:"/entrypoint.sh"},{name:"Nixos",flist:"https://hub.grid.tf/tf-official-vms/nixos-micro-latest.flist",entryPoint:"/entrypoint.sh"}],y=n("VM"+K(8)),V=n(),d=n(2),_=n(4),b=n(8192),M=n(!1),P=n(!1),D=n(!0),z=n(!1),h=n(),u=n([]),s=n([]);function Y(){u.value.length>0&&u.value.splice(0,1),u.value.unshift({key:"SSH_KEY",value:k.profile.ssh})}function O(){const g=K(5);s.value.push({name:"DISK"+g,size:50,mountPoint:"/mnt/"+g})}async function Q(){r.value.setStatus("deploy");const g=T.VM.toLowerCase();try{const a=await se(k.profile,g);await r.value.validateBalance(a);const m=await pe(a,{name:y.value,network:{addAccess:z.value},machines:[{name:y.value,cpu:_.value,memory:b.value,flist:V.value.value,entryPoint:V.value.entryPoint,farmId:h.value.farmID,farmName:h.value.name,country:h.value.country,disks:s.value,envs:u.value,planetary:D.value,publicIpv4:M.value,publicIpv6:P.value,rootFilesystemSize:d.value}]});r.value.reloadDeploymentsList(),r.value.setStatus("success","Successfully deployed a micro virtual machine."),r.value.openDialog(m,{SSH_KEY:"Public SSH Key"})}catch(a){r.value.setStatus("failed",ie(a,"Failed to deploy micro virtual machine instance."))}}return(g,a)=>{const m=i("v-text-field"),p=i("input-validator"),U=i("v-switch"),W=i("v-textarea"),J=i("d-tabs"),X=i("v-btn"),ee=i("weblet-layout");return G(),oe(ee,{ref_key:"layout",ref:r,onMount:Y},{title:t(()=>[S("Deploy a Micro Virtual Machine ")]),subtitle:t(()=>[S("Deploy a new micro virtual machine on the Threefold Grid "),ce]),"footer-actions":t(()=>{var e;return[l(X,{color:"primary",variant:"tonal",disabled:(e=w.value)==null?void 0:e.invalid,onClick:Q},{default:t(()=>[S("Deploy")]),_:1},8,["disabled"])]}),default:t(()=>[l(J,{tabs:[{title:"Config",value:"config"},{title:"Environment Variables",value:"env"},{title:"Disks",value:"disks"}],ref_key:"tabs",ref:w},{config:t(()=>[l(p,{value:y.value,rules:[c("Name is required."),F("Name minLength is 2 chars.",2),N("Name maxLength is 15 chars.",15)]},{default:t(({props:e})=>[l(m,f({label:"Name",modelValue:y.value,"onUpdate:modelValue":a[0]||(a[0]=o=>y.value=o)},e),null,16,["modelValue"])]),_:1},8,["value","rules"]),l(H,{images:q,modelValue:V.value,"onUpdate:modelValue":a[1]||(a[1]=e=>V.value=e)},null,8,["modelValue"]),l(Z,{cpu:_.value,memory:b.value,modelValue:C(d),"onUpdate:modelValue":a[2]||(a[2]=e=>E(d)?d.value=e:null),modelModifiers:{number:!0}},null,8,["cpu","memory","modelValue"]),l(p,{value:_.value,rules:[c("CPU is required."),L("CPU must be a valid integer."),x("CPU min is 2 cores.",2),$("CPU max is 32 cores.",32)]},{default:t(({props:e})=>[l(m,f({label:"CPU (vCores)",type:"number",modelValue:_.value,"onUpdate:modelValue":a[3]||(a[3]=o=>_.value=o),modelModifiers:{number:!0}},e),null,16,["modelValue"])]),_:1},8,["value","rules"]),l(p,{value:b.value,rules:[c("Memory is required."),L("Memory must be a valid integer."),x("Minimum allowed memory is 256 MB.",256),$("Maximum allowed memory is 256 GB.",256*1024)]},{default:t(({props:e})=>[l(m,f({label:"Memory (MB)",type:"number",modelValue:b.value,"onUpdate:modelValue":a[4]||(a[4]=o=>b.value=o),modelModifiers:{number:!0}},e),null,16,["modelValue"])]),_:1},8,["value","rules"]),l(U,{color:"primary",inset:"",label:"Public IPv4",modelValue:M.value,"onUpdate:modelValue":a[5]||(a[5]=e=>M.value=e)},null,8,["modelValue"]),l(U,{color:"primary",inset:"",label:"Public IPv6",modelValue:P.value,"onUpdate:modelValue":a[6]||(a[6]=e=>P.value=e)},null,8,["modelValue"]),l(U,{color:"primary",inset:"",label:"Planetary Network",modelValue:D.value,"onUpdate:modelValue":a[7]||(a[7]=e=>D.value=e)},null,8,["modelValue"]),l(U,{color:"primary",inset:"",label:"Add Wireguard Access",modelValue:z.value,"onUpdate:modelValue":a[8]||(a[8]=e=>z.value=e)},null,8,["modelValue"]),l(j,{filters:{cpu:_.value,memory:b.value,publicIp:M.value,ssd:s.value.reduce((e,o)=>e+o.size,C(d))},modelValue:C(h),"onUpdate:modelValue":a[9]||(a[9]=e=>E(h)?h.value=e:null)},null,8,["filters","modelValue"])]),env:t(()=>[l(B,{modelValue:u.value,"onUpdate:modelValue":a[10]||(a[10]=e=>u.value=e),onAdd:a[11]||(a[11]=e=>u.value.push({key:"",value:""}))},{default:t(({index:e})=>[l(p,{value:u.value[e].key,rules:[c("Key name is required."),A("Key can't start with a number, a non-alphanumeric character or a whitespace.",{pattern:/^[a-zA-Z]/}),A("Key can't start with a number, a non-alphanumeric character or a whitespace.",{pattern:/^[^0-9_\s][a-zA-Z0-9_]+$/}),N("Key max length is 128 chars.",128)]},{default:t(({props:o})=>[l(m,f({label:"Name",modelValue:u.value[e].key,"onUpdate:modelValue":v=>u.value[e].key=v},o),null,16,["modelValue","onUpdate:modelValue"])]),_:2},1032,["value","rules"]),l(p,{value:u.value[e].value,rules:[c("Value is required.")]},{default:t(({props:o})=>[l(W,f({label:"Value",modelValue:u.value[e].value,"onUpdate:modelValue":v=>u.value[e].value=v,"no-resize":"",spellcheck:!1},o),null,16,["modelValue","onUpdate:modelValue"])]),_:2},1032,["value","rules"])]),_:1},8,["modelValue"])]),disks:t(()=>[l(B,{modelValue:s.value,"onUpdate:modelValue":a[12]||(a[12]=e=>s.value=e),onAdd:O},{default:t(({index:e})=>[I("p",fe,"Disk #"+ue(e+1),1),l(p,{value:s.value[e].name,rules:[c("Disk name is required."),A("Disk name can't start with a number, a non-alphanumeric character or a whitespace",{pattern:/^[A-Za-z]/}),F("Disk minLength is 2 chars.",2),ne("Disk name only accepts alphanumeric chars."),N("Disk maxLength is 15 chars.",15)]},{default:t(({props:o})=>[l(m,f({label:"Name",modelValue:s.value[e].name,"onUpdate:modelValue":v=>s.value[e].name=v},o),null,16,["modelValue","onUpdate:modelValue"])]),_:2},1032,["value","rules"]),l(p,{value:s.value[e].size,rules:[c("Disk size is required."),L("Disk size must be a valid integer."),x("Minimum allowed disk size is 1 GB.",1),$("Maximum allowed disk size is 10000 GB.",1e4)]},{default:t(({props:o})=>[l(m,f({label:"Size (GB)",type:"number",modelValue:s.value[e].size,"onUpdate:modelValue":v=>s.value[e].size=v,modelModifiers:{number:!0}},o),null,16,["modelValue","onUpdate:modelValue"])]),_:2},1032,["value","rules"])]),_:1},8,["modelValue"])]),_:1},512)]),_:1},512)}}}),_e={name:"MicroVirtualMachine",components:{MicroVm:Ve,TfDeploymentList:ve},setup(){return{name:T.VM}}},be={class:"mt-4"};function he(R,r,w,k,q,y){const V=i("MicroVm"),d=i("TfDeploymentList");return G(),me(de,null,[l(V),I("div",be,[l(d,{"project-name":k.name},null,8,["project-name"])])],64)}const De=re(_e,[["render",he]]);export{De as default};
