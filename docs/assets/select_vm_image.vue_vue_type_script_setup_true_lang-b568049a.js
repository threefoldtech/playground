import{d as w,r as n,p,b as i,o as v,l as f,f as s,F as c,w as V,m as _,q as E}from"./index-df6f743d.js";const F={name:"SelectVmImage"},O=w({...F,props:{modelValue:{type:Object,required:!1},images:{type:Array,required:!0}},emits:["update:model-value"],setup(y,{emit:g}){const h=y,l=n(),a=n(),o=n(h.images[0]);p(o,e=>{e.name!=="Other"&&(l.value=e.flist,a.value=e.entryPoint)},{immediate:!0}),p([l,a],([e,t])=>{g("update:model-value",e&&t?{value:e,entryPoint:t}:void 0)},{immediate:!0,deep:!0});function b(e){return fetch(e+".md5").then(t=>t.status!==200).then(t=>{if(t)throw new Error}).catch(()=>({message:"Couldn't find flist with the provided url.",isExist:!1}))}return(e,t)=>{const q=i("v-autocomplete"),m=i("v-text-field"),d=i("input-validator");return v(),f(c,null,[s(q,{label:"VM Image",items:[...e.$props.images,{name:"Other"}],"return-object":"","item-title":"name",modelValue:o.value,"onUpdate:modelValue":t[0]||(t[0]=r=>o.value=r)},null,8,["items","modelValue"]),o.value.name==="Other"?(v(),f(c,{key:0},[s(d,{rules:[e.validators.required("Flist is required."),e.validators.isURL("Flist must be a valid URL.",{protocols:["https"]})],"async-rules":o.value.name==="Other"?[b]:[],value:l.value},{default:V(({props:r})=>[s(m,_({label:"Flist",modelValue:l.value,"onUpdate:modelValue":t[1]||(t[1]=u=>l.value=u)},r),null,16,["modelValue"])]),_:1},8,["rules","async-rules","value"]),s(d,{rules:[e.validators.required("Entry point is required.")],value:a.value},{default:V(({props:r})=>[s(m,_({label:"Entry Point",modelValue:a.value,"onUpdate:modelValue":t[2]||(t[2]=u=>a.value=u)},r),null,16,["modelValue"])]),_:1},8,["rules","value"])],64)):E("",!0)],64)}}});export{O as _};
