import{d as O,r as u,p as T,b as g,o as R,l as q,f as n,v as W,F as E,w as i,m as I,q as z,u as Q,a as J,A as X,c as Z,g as ee,e as D,h as k,i as P,j as B,t as ae,z as te,k as le,n as oe,_ as ne}from"./index-df6f743d.js";import{_ as h,P as G,d as re,a as ue}from"./tf_deployment_list.vue_vue_type_script_setup_true_lang-1803a4f6.js";import"./list_table.vue_vue_type_script_setup_true_lang-046c7938.js";const se={name:"AlgorandCapacity"},j=O({...se,props:{network:null,type:null},emits:["update:cpu","update:memory","update:storage"],setup($,{emit:p}){const m=$,N=u(),A=u(),_=u(),b=u(!1),d=u(2),v=u(4096),c=u(100);T(d,e=>p("update:cpu",e),{immediate:!0}),T(v,e=>p("update:memory",e),{immediate:!0}),T(c,e=>p("update:storage",e),{immediate:!0}),T(()=>[b.value,m.network,m.type],([e,t,r])=>{var s,S,f,l,a,y;if(e)(S=N.value)==null||S.validate((s=d.value)==null?void 0:s.toString()),(l=A.value)==null||l.validate((f=v.value)==null?void 0:f.toString()),(y=_.value)==null||y.validate((a=c.value)==null?void 0:a.toString());else{const w=U(t,r);d.value=w.cpu,v.value=w.memory,c.value=w.storage}});function L(e){return t=>{const r=U(m.network,m.type),s=e.min(`CPU min is ${r.cpu} cores.`,r.cpu)(t);return s||e.max("CPU max is 32 cores.",32)(t)}}function V(e){return t=>{const r=U(m.network,m.type),s=e.min(`Minimum allowed memory is ${r.memory} GB.`,r.memory)(t);return s||e.max("Maximum allowed memory is 256 GB.",256*1024)(t)}}function M(e){return t=>{const r=U(m.network,m.type),s=e.min(`Minimum allowed storage size is ${r.storage} GB.`,r.storage)(t);return s||e.max(`Maximum allowed storage size is ${r.storage+200} GB.`,r.storage+200)(t)}}function U(e,t){return t=="relay"&&e=="mainnet"?{cpu:4,memory:1024*8,storage:950}:t=="indexer"&&e=="testnet"?{cpu:4,memory:1024*8,storage:1300}:t=="indexer"&&e=="mainnet"?{cpu:4,memory:1024*8,storage:1500}:{cpu:2,memory:4*1024,storage:100}}return(e,t)=>{const r=g("v-switch"),s=g("v-text-field"),S=g("input-validator");return R(),q(E,null,[n(r,{color:"primary",inset:"",label:"Set Custom Capacity",modelValue:b.value,"onUpdate:modelValue":t[0]||(t[0]=f=>b.value=f)},null,8,["modelValue"]),W(e.$slots,"default"),b.value?(R(),q(E,{key:0},[n(S,{value:d.value,rules:[e.validators.required("CPU is required."),e.validators.isInt("CPU must be a valid integer."),L(e.validators)],ref_key:"cpuInput",ref:N},{default:i(({props:f})=>[n(s,I({label:"CPU (vCores)",type:"number",modelValue:d.value,"onUpdate:modelValue":t[1]||(t[1]=l=>d.value=l),modelModifiers:{number:!0}},f),null,16,["modelValue"])]),_:1},8,["value","rules"]),n(S,{value:v.value,rules:[e.validators.required("Memory is required."),e.validators.isInt("Memory must be a valid integer."),V(e.validators)],ref_key:"memoryInput",ref:A},{default:i(({props:f})=>[n(s,I({label:"Memory (MB)",type:"number",modelValue:v.value,"onUpdate:modelValue":t[2]||(t[2]=l=>v.value=l),modelModifiers:{number:!0}},f),null,16,["modelValue"])]),_:1},8,["value","rules"]),n(S,{value:c.value,rules:[e.validators.required("Storage size is required."),e.validators.isInt("Storage size must be a valid integer."),M(e.validators)],ref_key:"storageInput",ref:_},{default:i(({props:f})=>[n(s,I({label:"Storage Size (GB)",type:"number",modelValue:c.value,"onUpdate:modelValue":t[3]||(t[3]=l=>c.value=l),modelModifiers:{number:!0}},f),null,16,["modelValue"])]),_:1},8,["value","rules"])],64)):z("",!0)],64)}}}),ie=B("a",{target:"_blank",href:"https://manual.grid.tf/weblets/weblets_algorand.html",class:"app-link"}," Quick start documentation ",-1),de={name:"TfAlgorand",components:{SelectFarm:h,AlgorandCapacity:j}},me=O({...de,setup($){const p=Q(),m=u(!1),N=u(),A=J(),_=u("al"+ee(9)),b=u(!1),d=u(),v=u(),c=u(),L=u("mainnet"),V=u("default"),M=u(""),U=X(()=>M.value?M.value.split(" ").length:0),e=u(24e6),t=u(26e6),r=u();T(e,()=>N.value.validate(t.value.toString()));async function s(){p.value.setStatus("deploy");const l=G.Algorand.toLowerCase();try{const a=await le(A.profile,l);await p.value.validateBalance(a);const y=await re(a,{name:_.value,machines:[{name:_.value,cpu:d.value,memory:v.value,farmId:r.value.farmID,farmName:r.value.name,country:r.value.country,flist:"https://hub.grid.tf/tf-official-apps/algorand-latest.flist",entryPoint:"/sbin/zinit init",rootFilesystemSize:c.value,publicIpv4:b.value,planetary:!0,disks:V.value==="indexer"?[{size:50,mountPoint:"/var/lib/docker"}]:[],envs:[{key:"SSH_KEY",value:A.profile.ssh},{key:"NETWORK",value:L.value},{key:"NODE_TYPE",value:V.value},...V.value==="participant"?[{key:"ACCOUNT_MNEMONICS",value:M.value},{key:"FIRST_ROUND",value:e.value.toString()},{key:"LAST_ROUND",value:t.value.toString()}]:[]]}]});p.value.reloadDeploymentsList(),p.value.setStatus("success","Successfully deployed an alogrand node."),p.value.openDialog(y,{SSH_KEY:"Public SSH Key",NETWORK:"Network",NODE_TYPE:"Node Type",ACCOUNT_MNEMONICS:"Account Mnemonic",FIRST_ROUND:"First Round",LAST_ROUND:"Last Round"})}catch(a){p.value.setStatus("failed",oe(a,"Failed to deploy an alogrand node."))}}function S(l){if(l.split(" ").length!==25)return{message:"Mnemonic must have 25 words separated by spaces."}}function f(l){return a=>{const y=e.value;return l.min(`Last round must be greater than ${y}`,y+1)(a)}}return(l,a)=>{const y=g("v-text-field"),w=g("input-validator"),x=g("v-switch"),F=g("v-select"),K=g("form-validator"),Y=g("v-btn"),H=g("weblet-layout");return R(),Z(H,{ref_key:"layout",ref:p},{title:i(()=>[D("Deploy a Algorand Instance ")]),subtitle:i(()=>[D(" Algorand (ALGO) is a blockchain platform and cryptocurrency designed to function like a major payments processor. "),ie]),"footer-actions":i(()=>[n(Y,{color:"primary",variant:"tonal",onClick:s,disabled:!m.value},{default:i(()=>[D(" Deploy ")]),_:1},8,["disabled"])]),default:i(()=>[n(K,{modelValue:m.value,"onUpdate:modelValue":a[11]||(a[11]=o=>m.value=o)},{default:i(()=>[n(w,{value:_.value,rules:[l.validators.required("Name is required."),l.validators.minLength("Name minLength is 2 chars.",2),l.validators.maxLength("Name maxLength is 15 chars.",15)]},{default:i(({props:o})=>[n(y,I({label:"Name",modelValue:_.value,"onUpdate:modelValue":a[0]||(a[0]=C=>_.value=C)},o),null,16,["modelValue"])]),_:1},8,["value","rules"]),n(x,{color:"primary",inset:"",label:"Public IPv4",modelValue:b.value,"onUpdate:modelValue":a[1]||(a[1]=o=>b.value=o)},null,8,["modelValue"]),n(j,{network:L.value,type:V.value,cpu:k(d),"onUpdate:cpu":a[7]||(a[7]=o=>P(d)?d.value=o:null),cpuModifiers:{number:!0},memory:k(v),"onUpdate:memory":a[8]||(a[8]=o=>P(v)?v.value=o:null),memoryModifiers:{number:!0},storage:k(c),"onUpdate:storage":a[9]||(a[9]=o=>P(c)?c.value=o:null),storageModifiers:{number:!0}},{default:i(()=>[n(F,{label:"Network",items:[{title:"Mainnet",value:"mainnet"},{title:"Testnet",value:"testnet"},{title:"Betanet",value:"betanet"},{title:"Devnet",value:"devnet"}],modelValue:L.value,"onUpdate:modelValue":a[2]||(a[2]=o=>L.value=o)},null,8,["modelValue"]),n(F,{label:"Node Type",items:[{title:"Default",value:"default"},{title:"Participant",value:"participant"},{title:"Relay",value:"relay"},{title:"Indexer",value:"indexer"}],modelValue:V.value,"onUpdate:modelValue":a[3]||(a[3]=o=>V.value=o)},null,8,["modelValue"]),V.value==="participant"?(R(),q(E,{key:0},[n(w,{value:M.value,rules:[l.validators.required("Mnemonic is required."),o=>l.validators.isAlpha("Mnemonic can contain only alphabetic characters.")(o.replace(/\s/g,"")),S]},{default:i(({props:o})=>[n(y,I({label:"Account Mnemonic",placeholder:"Algorand Account Mnemonic",modelValue:M.value,"onUpdate:modelValue":a[4]||(a[4]=C=>M.value=C),modelModifiers:{trim:!0}},o,{autofocus:"",counter:""}),{counter:i(()=>[B("span",{class:te({"text-red":k(U)>25})},ae(k(U)),3),D(" / 25 ")]),_:2},1040,["modelValue"])]),_:1},8,["value","rules"]),n(w,{value:e.value,rules:[l.validators.required("First round is required."),l.validators.isInt("First round must be a valid integer."),l.validators.min("First round must be greater than 0.",1)]},{default:i(({props:o})=>[n(y,I({label:"First Round",placeholder:"First Validation Block",modelValue:e.value,"onUpdate:modelValue":a[5]||(a[5]=C=>e.value=C),modelModifiers:{number:!0}},o,{type:"number"}),null,16,["modelValue"])]),_:1},8,["value","rules"]),n(w,{value:t.value,rules:[l.validators.required("Last round is required."),l.validators.isInt("Last round must be a valid integer."),f(l.validators)],ref_key:"lastRoundInput",ref:N},{default:i(({props:o})=>[n(y,I({label:"Last Round",placeholder:"Last Validation Block",modelValue:t.value,"onUpdate:modelValue":a[6]||(a[6]=C=>t.value=C),modelModifiers:{number:!0}},o,{type:"number"}),null,16,["modelValue"])]),_:1},8,["value","rules"])],64)):z("",!0)]),_:1},8,["network","type","cpu","memory","storage"]),n(h,{filters:{cpu:k(d),memory:k(v),ssd:k(c)+(V.value==="indexer"?50:0),publicIp:b.value},modelValue:k(r),"onUpdate:modelValue":a[10]||(a[10]=o=>P(r)?r.value=o:null)},null,8,["filters","modelValue"])]),_:1},8,["modelValue"])]),_:1},512)}}}),pe={name:"AlgorandView",components:{TfAlgorand:me,TfDeploymentList:ue},setup(){return{name:G.Algorand}}},ve={class:"mt-4"};function ce($,p,m,N,A,_){const b=g("TfAlgorand"),d=g("TfDeploymentList");return R(),q(E,null,[n(b),B("div",ve,[n(d,{"project-name":N.name},null,8,["project-name"])])],64)}const be=ne(pe,[["render",ce]]);export{be as default};
