import{d as F,u as j,r as d,a as A,b as i,o as P,c as M,w as u,g as O,e as k,f as a,h as E,m as W,i as z,j as I,C as G,p as m,q as N,s as U,y as K,z as D,_ as Q,A as Y,F as J}from"./index-0b744afb.js";import{_ as x,P as L,d as X}from"./root_fs-3cd83c23.js";import{g as $,h as Z,i as ee,r as ae,_ as te}from"./tf_deployment_list.vue_vue_type_script_setup_true_lang-9f7c35ec.js";import{_ as B}from"./select_gateway_node.vue_vue_type_script_setup_true_lang-2c1545e5.js";import"./list_table.vue_vue_type_script_setup_true_lang-54d7fb0b.js";const le=U("a",{target:"_blank",href:"https://manual.grid.tf/weblets/weblets_subsquid.html",class:"app-link"}," Quick start documentation ",-1),oe={name:"TfSubsquid",components:{SelectSolutionFlavor:$,SelectGatewayNode:B,SelectFarm:x}},se=F({...oe,setup(C){const t=j(),b=d(!1),p=A(),s=d("SS"+O(9)),c=d(""),v=d(!1),l=d(),f=d(),r=d();async function T(){t.value.setStatus("deploy");const g=L.Subsquid.toLowerCase(),e=Z({deploymentName:s.value,projectName:g,twinId:p.profile.twinId}),S=e+"."+f.value.domain;let n,_;try{n=await K(p.profile,g),await t.value.validateBalance(n),_=await X(n,{name:s.value,machines:[{name:s.value,cpu:l.value.cpu,memory:l.value.memory,disks:[{size:l.value.disk,mountPoint:"/var/lib/docker"}],flist:"https://hub.grid.tf/tf-official-apps/subsquid-latest.flist",entryPoint:"/init.sh",farmId:r.value.farmID,farmName:r.value.name,country:r.value.country,envs:[{key:"SSH_KEY",value:p.profile.ssh},{key:"CHAIN_ENDPOINT",value:c.value},{key:"SUBSQUID_WEBSERVER_HOSTNAME",value:S}]}]})}catch(y){return t.value.setStatus("failed",D(y,"Failed to deploy a Subsquid instance."))}try{t.value.setStatus("deploy","Preparing to deploy gateway..."),await ee(n,{name:e,nodeId:f.value.id,backends:[`http://[${_[0].planetary}]:4444`]}),t.value.reloadDeploymentsList(),t.value.setStatus("success","Successfully deployed a Subsquid instance."),t.value.openDialog(_,{SSH_KEY:"Public SSH Key",SUBSQUID_WEBSERVER_HOSTNAME:"Subsquid Webserver Hostname",CHAIN_ENDPOINT:"Chain Endpoint"})}catch(y){t.value.setStatus("deploy","Rollbacking back due to fail to deploy gateway..."),await ae(n,s.value),t.value.setStatus("failed",D(y,"Failed to deploy a Subsquid instance."))}}return(g,e)=>{const S=i("v-text-field"),n=i("input-validator"),_=i("v-switch"),y=i("form-validator"),H=i("v-btn"),R=i("weblet-layout");return P(),M(R,{ref_key:"layout",ref:t},{title:u(()=>[k("Deploy a Subsquid Instance ")]),subtitle:u(()=>[k(" Subsquid indexer is a piece of software that reads all the blocks from a Substrate based blockchain, decodes and stores them for processing in a later stage. "),le]),"footer-actions":u(()=>[a(H,{color:"primary",variant:"tonal",onClick:T,disabled:!b.value},{default:u(()=>[k(" Deploy ")]),_:1},8,["disabled"])]),default:u(()=>[a(y,{modelValue:b.value,"onUpdate:modelValue":e[6]||(e[6]=V=>b.value=V)},{default:u(()=>{var V,q,h;return[a(n,{value:s.value,rules:[E("Name is required."),W("Name minLength is 2 chars.",2),z("Name maxLength is 15 chars.",15)]},{default:u(({props:o})=>[a(S,I({label:"Name",modelValue:s.value,"onUpdate:modelValue":e[0]||(e[0]=w=>s.value=w)},o),null,16,["modelValue"])]),_:1},8,["value","rules"]),a(n,{value:c.value,rules:[E("Endpoint is required."),G("Please provide a valid endpoint.",{protocols:["wss"]})]},{default:u(({props:o})=>[a(S,I({label:"Websockt Endpoint",modelValue:c.value,"onUpdate:modelValue":e[1]||(e[1]=w=>c.value=w)},o),null,16,["modelValue"])]),_:1},8,["value","rules"]),a(_,{color:"primary",inset:"",label:"Public IPv4",modelValue:v.value,"onUpdate:modelValue":e[2]||(e[2]=o=>v.value=o)},null,8,["modelValue"]),a($,{modelValue:m(l),"onUpdate:modelValue":e[3]||(e[3]=o=>N(l)?l.value=o:null)},null,8,["modelValue"]),a(B,{modelValue:m(f),"onUpdate:modelValue":e[4]||(e[4]=o=>N(f)?f.value=o:null)},null,8,["modelValue"]),a(x,{filters:{cpu:(V=m(l))==null?void 0:V.cpu,memory:(q=m(l))==null?void 0:q.memory,ssd:(h=m(l))==null?void 0:h.disk,publicIp:v.value},modelValue:m(r),"onUpdate:modelValue":e[5]||(e[5]=o=>N(r)?r.value=o:null)},null,8,["filters","modelValue"])]}),_:1},8,["modelValue"])]),_:1},512)}}}),ne={name:"SubsquidView",components:{Subsquid:se,TfDeploymentList:te},setup(){return{name:L.Subsquid}}},ue={class:"mt-4"};function ie(C,t,b,p,s,c){const v=i("Subsquid"),l=i("TfDeploymentList");return P(),Y(J,null,[a(v),U("div",ue,[a(l,{"project-name":p.name},null,8,["project-name"])])],64)}const ve=Q(ne,[["render",ie]]);export{ve as default};
