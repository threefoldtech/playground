import{d as C,r as n,B as p,b as i,o as v,A as c,f as r,F as f,w as V,j as _,h,C as E,D as F}from"./index-b7afd9dd.js";const q={name:"SelectVmImage"},U=C({...q,props:{modelValue:{type:Object,required:!1},images:{type:Array,required:!0}},emits:["update:model-value"],setup(y,{emit:g}){const b=y,l=n(),a=n(),o=n(b.images[0]);p(o,t=>{t.name!=="Other"&&(l.value=t.flist,a.value=t.entryPoint)},{immediate:!0}),p([l,a],([t,e])=>{g("update:model-value",t&&e?{value:t,entryPoint:e}:void 0)},{immediate:!0,deep:!0});function w(t){return fetch(t+".md5").then(e=>e.status!==200).then(e=>{if(e)throw new Error}).catch(()=>({message:"Couldn't find flist with the provided url.",isExist:!1}))}return(t,e)=>{const x=i("v-autocomplete"),m=i("v-text-field"),d=i("input-validator");return v(),c(f,null,[r(x,{label:"VM Image",items:[...t.$props.images,{name:"Other"}],"return-object":"","item-title":"name",modelValue:o.value,"onUpdate:modelValue":e[0]||(e[0]=s=>o.value=s)},null,8,["items","modelValue"]),o.value.name==="Other"?(v(),c(f,{key:0},[r(d,{rules:[h("Flist is required."),E("Flist must be a valid URL.",{protocols:["https"]})],"async-rules":o.value.name==="Other"?[w]:[],value:l.value},{default:V(({props:s})=>[r(m,_({label:"Flist",modelValue:l.value,"onUpdate:modelValue":e[1]||(e[1]=u=>l.value=u)},s),null,16,["modelValue"])]),_:1},8,["rules","async-rules","value"]),r(d,{rules:[h("Entry point is required.")],value:a.value},{default:V(({props:s})=>[r(m,_({label:"Entry Point",modelValue:a.value,"onUpdate:modelValue":e[2]||(e[2]=u=>a.value=u)},s),null,16,["modelValue"])]),_:1},8,["rules","value"])],64)):F("",!0)],64)}}});export{U as _};
