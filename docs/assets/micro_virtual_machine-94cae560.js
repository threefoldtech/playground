import{d as O,u as Q,r as i,a as W,b as r,o as A,c as J,w as s,g as C,e as S,f as t,m as c,h as z,i as I,j as N,t as X,k as x,n as ee,_ as ae,l as le,F as te}from"./index-df6f743d.js";import{b as $,_ as B,P as F,d as oe,a as se}from"./tf_deployment_list.vue_vue_type_script_setup_true_lang-1803a4f6.js";import{_ as K}from"./select_vm_image.vue_vue_type_script_setup_true_lang-b568049a.js";import{_ as L}from"./expandable_layout.vue_vue_type_script_setup_true_lang-235dc857.js";import"./list_table.vue_vue_type_script_setup_true_lang-046c7938.js";const ue=N("a",{class:"app-link",href:"https://manual.grid.tf/weblets/weblets_vm.html",target:"_blank"}," Quick start documentation ",-1),ie={class:"text-h6 mb-4"},ne={name:"MicroVm",components:{SelectVmImage:K,RootFsSize:$,SelectFarm:B,ExpandableLayout:L}},re=O({...ne,setup(E){const m=Q(),U=i(),k=W(),q=[{name:"Ubuntu-22.04",flist:"https://hub.grid.tf/tf-official-apps/threefoldtech-ubuntu-22.04.flist",entryPoint:"/sbin/zinit init"},{name:"Alpine-3",flist:"https://hub.grid.tf/tf-official-apps/threefoldtech-alpine-3.flist",entryPoint:"/entrypoint.sh"},{name:"CentOS-8",flist:"https://hub.grid.tf/tf-official-apps/threefoldtech-centos-8.flist",entryPoint:"/entrypoint.sh"},{name:"Nixos",flist:"https://hub.grid.tf/tf-official-vms/nixos-micro-latest.flist",entryPoint:"/entrypoint.sh"}],y=i("VM"+C(8)),V=i(),v=i(2),b=i(4),h=i(8192),_=i(!1),w=i(!1),P=i(!0),D=i(!1),g=i(),u=i([]),n=i([]);function G(){u.value.length>0&&u.value.splice(0,1),u.value.unshift({key:"SSH_KEY",value:k.profile.ssh})}function j(){const a=C(5);n.value.push({name:"DISK"+a,size:50,mountPoint:"/mnt/"+a})}async function T(){m.value.setStatus("deploy");const a=F.VM.toLowerCase();try{const l=await x(k.profile,a);await m.value.validateBalance(l);const d=await oe(l,{name:y.value,network:{addAccess:D.value},machines:[{name:y.value,cpu:b.value,memory:h.value,flist:V.value.value,entryPoint:V.value.entryPoint,farmId:g.value.farmID,farmName:g.value.name,country:g.value.country,disks:n.value,envs:u.value,planetary:P.value,publicIpv4:_.value,publicIpv6:w.value,rootFilesystemSize:v.value}]});m.value.reloadDeploymentsList(),m.value.setStatus("success","Successfully deployed a micro virtual machine."),m.value.openDialog(d,{SSH_KEY:"Public SSH Key"})}catch(l){m.value.setStatus("failed",ee(l,"Failed to deploy micro virtual machine instance."))}}return(a,l)=>{const d=r("v-text-field"),p=r("input-validator"),M=r("v-switch"),H=r("v-textarea"),R=r("d-tabs"),Y=r("v-btn"),Z=r("weblet-layout");return A(),J(Z,{ref_key:"layout",ref:m,onMount:G},{title:s(()=>[S("Deploy a Micro Virtual Machine ")]),subtitle:s(()=>[S("Deploy a new micro virtual machine on the Threefold Grid "),ue]),"footer-actions":s(()=>{var e;return[t(Y,{color:"primary",variant:"tonal",disabled:(e=U.value)==null?void 0:e.invalid,onClick:T},{default:s(()=>[S("Deploy")]),_:1},8,["disabled"])]}),default:s(()=>[t(R,{tabs:[{title:"Config",value:"config"},{title:"Environment Variables",value:"env"},{title:"Disks",value:"disks"}],ref_key:"tabs",ref:U},{config:s(()=>[t(p,{value:y.value,rules:[a.validators.required("Name is required."),e=>a.validators.isAlpha("Name must start with alphabet char.")(e[0]),a.validators.isAlphanumeric("Name should consist of alphabets & numbers only."),a.validators.minLength("Name minLength is 2 chars.",2),a.validators.maxLength("Name maxLength is 15 chars.",15)]},{default:s(({props:e})=>[t(d,c({label:"Name",modelValue:y.value,"onUpdate:modelValue":l[0]||(l[0]=o=>y.value=o)},e),null,16,["modelValue"])]),_:1},8,["value","rules"]),t(K,{images:q,modelValue:V.value,"onUpdate:modelValue":l[1]||(l[1]=e=>V.value=e)},null,8,["modelValue"]),t($,{cpu:b.value,memory:h.value,modelValue:z(v),"onUpdate:modelValue":l[2]||(l[2]=e=>I(v)?v.value=e:null),modelModifiers:{number:!0}},null,8,["cpu","memory","modelValue"]),t(p,{value:b.value,rules:[a.validators.required("CPU is required."),a.validators.isInt("CPU must be a valid integer."),a.validators.min("CPU min is 1 cores.",1),a.validators.max("CPU max is 32 cores.",32)]},{default:s(({props:e})=>[t(d,c({label:"CPU (vCores)",type:"number",modelValue:b.value,"onUpdate:modelValue":l[3]||(l[3]=o=>b.value=o),modelModifiers:{number:!0}},e),null,16,["modelValue"])]),_:1},8,["value","rules"]),t(p,{value:h.value,rules:[a.validators.required("Memory is required."),a.validators.isInt("Memory must be a valid integer."),a.validators.min("Minimum allowed memory is 256 MB.",256),a.validators.max("Maximum allowed memory is 256 GB.",256*1024)]},{default:s(({props:e})=>[t(d,c({label:"Memory (MB)",type:"number",modelValue:h.value,"onUpdate:modelValue":l[4]||(l[4]=o=>h.value=o),modelModifiers:{number:!0}},e),null,16,["modelValue"])]),_:1},8,["value","rules"]),t(M,{color:"primary",inset:"",label:"Public IPv4",modelValue:_.value,"onUpdate:modelValue":l[5]||(l[5]=e=>_.value=e)},null,8,["modelValue"]),t(M,{color:"primary",inset:"",label:"Public IPv6",modelValue:w.value,"onUpdate:modelValue":l[6]||(l[6]=e=>w.value=e)},null,8,["modelValue"]),t(M,{color:"primary",inset:"",label:"Planetary Network",modelValue:P.value,"onUpdate:modelValue":l[7]||(l[7]=e=>P.value=e)},null,8,["modelValue"]),t(M,{color:"primary",inset:"",label:"Add Wireguard Access",modelValue:D.value,"onUpdate:modelValue":l[8]||(l[8]=e=>D.value=e)},null,8,["modelValue"]),t(B,{filters:{cpu:b.value,memory:h.value,publicIp:_.value,ssd:n.value.reduce((e,o)=>e+o.size,z(v))},modelValue:z(g),"onUpdate:modelValue":l[9]||(l[9]=e=>I(g)?g.value=e:null)},null,8,["filters","modelValue"])]),env:s(()=>[t(L,{modelValue:u.value,"onUpdate:modelValue":l[10]||(l[10]=e=>u.value=e),onAdd:l[11]||(l[11]=e=>u.value.push({key:"",value:""}))},{default:s(({index:e})=>[t(p,{value:u.value[e].key,rules:[a.validators.required("Key name is required."),o=>a.validators.isAlpha("Key must start with alphabet char.")(o[0]),a.validators.pattern("Invalid key format.",{pattern:/^[^0-9_\s][a-zA-Z0-9_]+$/}),a.validators.maxLength("Key max length is 128 chars.",128)]},{default:s(({props:o})=>[t(d,c({label:"Name",modelValue:u.value[e].key,"onUpdate:modelValue":f=>u.value[e].key=f},o),null,16,["modelValue","onUpdate:modelValue"])]),_:2},1032,["value","rules"]),t(p,{value:u.value[e].value,rules:[a.validators.required("Value is required.")]},{default:s(({props:o})=>[t(H,c({label:"Value",modelValue:u.value[e].value,"onUpdate:modelValue":f=>u.value[e].value=f,"no-resize":"",spellcheck:!1},o),null,16,["modelValue","onUpdate:modelValue"])]),_:2},1032,["value","rules"])]),_:1},8,["modelValue"])]),disks:s(()=>[t(L,{modelValue:n.value,"onUpdate:modelValue":l[12]||(l[12]=e=>n.value=e),onAdd:j},{default:s(({index:e})=>[N("p",ie,"Disk #"+X(e+1),1),t(p,{value:n.value[e].name,rules:[a.validators.required("Disk name is required."),a.validators.pattern("Disk name can't start with a number, a non-alphanumeric character or a whitespace",{pattern:/^[A-Za-z]/}),a.validators.minLength("Disk minLength is 2 chars.",2),a.validators.isAlphanumeric("Disk name only accepts alphanumeric chars."),a.validators.maxLength("Disk maxLength is 15 chars.",15)]},{default:s(({props:o})=>[t(d,c({label:"Name",modelValue:n.value[e].name,"onUpdate:modelValue":f=>n.value[e].name=f},o),null,16,["modelValue","onUpdate:modelValue"])]),_:2},1032,["value","rules"]),t(p,{value:n.value[e].size,rules:[a.validators.required("Disk size is required."),a.validators.isInt("Disk size must be a valid integer."),a.validators.min("Minimum allowed disk size is 1 GB.",1),a.validators.max("Maximum allowed disk size is 10000 GB.",1e4)]},{default:s(({props:o})=>[t(d,c({label:"Size (GB)",type:"number",modelValue:n.value[e].size,"onUpdate:modelValue":f=>n.value[e].size=f,modelModifiers:{number:!0}},o),null,16,["modelValue","onUpdate:modelValue"])]),_:2},1032,["value","rules"])]),_:1},8,["modelValue"])]),_:1},512)]),_:1},512)}}}),me={name:"MicroVirtualMachine",components:{MicroVm:re,TfDeploymentList:se},setup(){return{name:F.VM}}},de={class:"mt-4"};function ve(E,m,U,k,q,y){const V=r("MicroVm"),v=r("TfDeploymentList");return A(),le(te,null,[t(V),N("div",de,[t(v,{"project-name":k.name},null,8,["project-name"])])],64)}const be=ae(me,[["render",ve]]);export{be as default};
